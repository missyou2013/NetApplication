package net.com.mvp.ac.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETING_MODEL".
*/
public class SetingModelDao extends AbstractDao<SetingModel, Long> {

    public static final String TABLENAME = "SETING_MODEL";

    /**
     * Properties of entity SetingModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property District_code = new Property(2, String.class, "district_code", false, "DISTRICT_CODE");
        public final static Property Interface_addre = new Property(3, String.class, "interface_addre", false, "INTERFACE_ADDRE");
        public final static Property Interface_number = new Property(4, String.class, "interface_number", false, "INTERFACE_NUMBER");
        public final static Property Organization_code = new Property(5, String.class, "organization_code", false, "ORGANIZATION_CODE");
        public final static Property Zhongduan_biaoshi = new Property(6, String.class, "zhongduan_biaoshi", false, "ZHONGDUAN_BIAOSHI");
        public final static Property Other = new Property(7, String.class, "other", false, "OTHER");
        public final static Property Other_ = new Property(8, String.class, "other_", false, "OTHER_");
    }


    public SetingModelDao(DaoConfig config) {
        super(config);
    }
    
    public SetingModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETING_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DISTRICT_CODE\" TEXT," + // 2: district_code
                "\"INTERFACE_ADDRE\" TEXT," + // 3: interface_addre
                "\"INTERFACE_NUMBER\" TEXT," + // 4: interface_number
                "\"ORGANIZATION_CODE\" TEXT," + // 5: organization_code
                "\"ZHONGDUAN_BIAOSHI\" TEXT," + // 6: zhongduan_biaoshi
                "\"OTHER\" TEXT," + // 7: other
                "\"OTHER_\" TEXT);"); // 8: other_
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETING_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SetingModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String district_code = entity.getDistrict_code();
        if (district_code != null) {
            stmt.bindString(3, district_code);
        }
 
        String interface_addre = entity.getInterface_addre();
        if (interface_addre != null) {
            stmt.bindString(4, interface_addre);
        }
 
        String interface_number = entity.getInterface_number();
        if (interface_number != null) {
            stmt.bindString(5, interface_number);
        }
 
        String organization_code = entity.getOrganization_code();
        if (organization_code != null) {
            stmt.bindString(6, organization_code);
        }
 
        String zhongduan_biaoshi = entity.getZhongduan_biaoshi();
        if (zhongduan_biaoshi != null) {
            stmt.bindString(7, zhongduan_biaoshi);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(8, other);
        }
 
        String other_ = entity.getOther_();
        if (other_ != null) {
            stmt.bindString(9, other_);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SetingModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String district_code = entity.getDistrict_code();
        if (district_code != null) {
            stmt.bindString(3, district_code);
        }
 
        String interface_addre = entity.getInterface_addre();
        if (interface_addre != null) {
            stmt.bindString(4, interface_addre);
        }
 
        String interface_number = entity.getInterface_number();
        if (interface_number != null) {
            stmt.bindString(5, interface_number);
        }
 
        String organization_code = entity.getOrganization_code();
        if (organization_code != null) {
            stmt.bindString(6, organization_code);
        }
 
        String zhongduan_biaoshi = entity.getZhongduan_biaoshi();
        if (zhongduan_biaoshi != null) {
            stmt.bindString(7, zhongduan_biaoshi);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(8, other);
        }
 
        String other_ = entity.getOther_();
        if (other_ != null) {
            stmt.bindString(9, other_);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SetingModel readEntity(Cursor cursor, int offset) {
        SetingModel entity = new SetingModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // district_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // interface_addre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // interface_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // organization_code
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zhongduan_biaoshi
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // other
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // other_
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SetingModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistrict_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInterface_addre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInterface_number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrganization_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZhongduan_biaoshi(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOther(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOther_(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SetingModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SetingModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SetingModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
